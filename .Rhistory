tree$edge.length[i]
tree$edge.length[i] / (sum(tree$edge.length) - tree$edge.length[i])
# Get proportion of ith branch as total length of tree:#
prop.branch.length <- tree$edge.length[i] / (sum(tree$edge.length) - tree$edge.length[i])
prop.branch.length
runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1)
runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length
as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length)
matrix(as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length), nrow = nrep)
apply(matrix(as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length), nrow = nrep), 1, sum)
# Get proportion of ith branch as total length of tree:#
prop.branch.length <- tree$edge.length[i] / (sum(tree$edge.length) - tree$edge.length[i])#
#
# Get number of changes assigned to ith branch if an equal rate were applied and characters are sampled from a uniform distribution:#
rand.changes <- apply(matrix(as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length), nrow = nrep), 1, sum)
rand.changes
hist(rand.changes)
pnorm(100, mean(rand.changes), sd(rand.changes))
pnorm(1, mean(rand.changes), sd(rand.changes))
pnorm(1, mean = mean(rand.changes), sd = sd(rand.changes))
?pnorm
gains
gains[1:2, ]
branch.gains
branch.gains[1:2, ]
branch.gains[1, ]
sum(branch.gains[1, ])
branch.gains[, i]
pnorm(branch.gains[, i], mean(rand.changes), sd(rand.changes))
# Get proportion of ith branch as total length of tree:#
prop.branch.length <- tree$edge.length[i] / (sum(tree$edge.length) - tree$edge.length[i])#
#
# Get number of changes assigned to ith branch if an equal rate were applied and characters are sampled from a uniform distribution:#
rand.changes <- apply(matrix(as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length), nrow = nrep), 1, sum)#
#
# Get p values based on random distribution (< 0.025 = significantly slow, > 0.975 = significantly fast):#
p.values <- pnorm(branch.gains[, i], mean(rand.changes), sd(rand.changes))
p.values < 0.025
which(p.values < 0.025)
length(which(p.values < 0.025))
c(length(which(p.values < 0.025)), , length(which(p.values > 0.975)))
c(length(which(p.values < 0.025)), 1, length(which(p.values > 0.975)))
p.values >= 0.025 && p.values <= 0.975
intersect(which(p.values >= 0.025), which(p.values <= 0.975))
length(intersect(which(p.values >= 0.025), which(p.values <= 0.975)))
for(i in 1:nrow(tree$edge)) {#
#
# Get proportion of ith branch as total length of tree:#
prop.branch.length <- tree$edge.length[i] / (sum(tree$edge.length) - tree$edge.length[i])#
#
# Get number of changes assigned to ith branch if an equal rate were applied and characters are sampled from a uniform distribution:#
rand.changes <- apply(matrix(as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length), nrow = nrep), 1, sum)#
#
# Get p values based on random distribution (< 0.025 = significantly slow, > 0.975 = significantly fast):#
p.values <- pnorm(branch.gains[, i], mean(rand.changes), sd(rand.changes))#
lo.non.hi <- c(length(which(p.values < 0.025)), length(intersect(which(p.values >= 0.025), which(p.values <= 0.975))), length(which(p.values > 0.975)))#
#
print(lo.non.hi)#
#
}
matrix(nrow = nrow(tree$edge), ncol = 3, dimnames = list(c(1:tree$edge), c("Low", "Non", "High")))
matrix(nrow = nrow(tree$edge), ncol = 3, dimnames = list(c(1:nrow(tree$edge)), c("Low", "Non", "High")))
branch.gains.sig <- matrix(nrow = nrow(tree$edge), ncol = 3, dimnames = list(c(1:nrow(tree$edge)), c("Low", "Non", "High")))#
#
for(i in 1:nrow(tree$edge)) {#
#
# Get proportion of ith branch as total length of tree:#
prop.branch.length <- tree$edge.length[i] / (sum(tree$edge.length) - tree$edge.length[i])#
#
# Get number of changes assigned to ith branch if an equal rate were applied and characters are sampled from a uniform distribution:#
rand.changes <- apply(matrix(as.numeric(runif(nrep * ncol(clad.matrix$matrix), min = 0, max = 1) < prop.branch.length), nrow = nrep), 1, sum)#
#
# Get p values based on random distribution (< 0.025 = significantly slow, > 0.975 = significantly fast):#
p.values <- pnorm(branch.gains[, i], mean(rand.changes), sd(rand.changes))#
branch.gains.sig[i, ] <- c(length(which(p.values < 0.025)), length(intersect(which(p.values >= 0.025), which(p.values <= 0.975))), length(which(p.values > 0.975)))#
#
}
branch.gains.sig
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2))
plot(tree, main = "Mean per-branch rates (gains only)")#
#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2))
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2))
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")
?edgelabels
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")
plot(tree, main = "Mean per-branch rates (gains only)")#
#
# GET RATE COLOURS FOR PLOTTING HERE#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), bg = "white")
branch.gains.sig / nrep
plot(tree, main = "Mean per-branch rates (gains only)")#
#
# GET RATE COLOURS FOR PLOTTING HERE#
#
edgelabels(pie = branch.gains.sig / nrep)
?edgelabels
plot(tree, main = "Mean per-branch rates (gains only)")#
#
# GET RATE COLOURS FOR PLOTTING HERE#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"))
plot(tree, main = "Mean per-branch rates (gains only)")#
#
# GET RATE COLOURS FOR PLOTTING HERE#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)
plot(tree, main = "Mean per-branch rates (gains only)")#
#
# GET RATE COLOURS FOR PLOTTING HERE#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2))
?edgelabels
plot(tree, main = "Mean per-branch rates (gains only)")#
#
# GET RATE COLOURS FOR PLOTTING HERE#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), frame = "none")
plot(tree, main = "Mean per-branch rates (gains only)\n(Red = significantly high rate, Blue = significiantly low rate, WHite = non-significant rate)")#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)
geoscalePlot(rev(time.bin.midpoints), all.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(all.time.rates.minCI), max(all.time.rates.maxCI)), label = "Changes per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(all.time.rates.maxCI, rev(all.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), all.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), loss.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(loss.time.rates.minCI), max(loss.time.rates.maxCI)), label = "Losses per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")
?polygon
?rgb
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(25, 25, 25, alpha = 0.3) , border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(0.25, 0.25, 0.25, alpha = 0.3) , border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(0.25, 0.25, 0.25, alpha = 0.3), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0.25, 0.25, 0.25, alpha = 0.3), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = "red")#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = "blue")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(1, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 1))
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))
?text
?title
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Test")
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Gains (red) and losses (blue) compared")
objects()
pdf("~/Documents/Publications/in prep/miRNA - James/output.pdf", width = 10, height = 7)#
#
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)")#
#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)\n(Red = significantly high rate, Blue = significiantly low rate, WHite = non-significant rate)")#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
#
plot(tree, main = "Mean per-branch rates (losses only)")#
#
edgelabels(round(apply(loss.branch.rates, 2, mean), 2), bg = "white")#
#
geoscalePlot(rev(time.bin.midpoints), all.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(all.time.rates.minCI), max(all.time.rates.maxCI)), label = "Changes per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(all.time.rates.maxCI, rev(all.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), all.time.rates.mean, type = "l")#
title("All changes")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
title("Gains only")#
#
geoscalePlot(rev(time.bin.midpoints), loss.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(loss.time.rates.minCI), max(loss.time.rates.maxCI)), label = "Losses per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")#
title("Losses only")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Gains (red) and losses (blue) compared")#
#
dev.off()
x
x$Changes
all.changes[1:2, ]
which(all.changes[, "Iteration"] == 1)
intersect(which(all.changes[, "Iteration"] == 1), which(all.changes[, "To"] == 1))
all.changes[intersect(which(all.changes[, "Iteration"] == 1), which(all.changes[, "To"] == 1)), ]
all.changes[intersect(which(all.changes[, "Iteration"] == 1), which(all.changes[, "To"] == 1)), "Branch"]
gain.branches <- all.changes[intersect(which(all.changes[, "Iteration"] == 1), which(all.changes[, "To"] == 1)), "Branch"]
unique(gain.branches)
tree$edge[unique(gain.branches), ]
gain.branches <- rle(sort(all.changes[intersect(which(all.changes[, "Iteration"] == 1), which(all.changes[, "To"] == 1)), "Branch"]))
gain.branches
gain.branches$values
tree$edge[gain.branches$values, ]
tree$edge
gain.branches$values
gain.branches$values == 0
which(gain.branches$values == 0)
gain.branches$lengths[which(gain.branches$values == 0)]
gain.branches$lengths[which(gain.branches$values == 0)] * (Ntip(tree) - 1)
gain.branches$lengths[which(gain.branches$values == 0)] * (Ntip(tree) - 2)
gain.branches
gain.branches$values < 0
gain.branches$values > 0
which(gain.branches$values > 0)
gain.branches$lengths[which(gain.branches$values > 0)]
min.losses <- max.losses <- 0#
#
for(i in gain.branches$values) {#
    if(i == 0) max.losses <- max.losses + (gain.branches$lengths[which(gain.branches$values == 0)] * (Ntip(tree) - 2))#
    if(i > 0) {#
    }#
}
i
tree$edge[i, ]
tree$edge[i, 2]
tree$edge[i, 2] <= Ntip(tree)
min.losses <- max.losses <- 0#
#
for(i in gain.branches$values) {#
    if(i == 0) max.losses <- max.losses + (gain.branches$lengths[which(gain.branches$values == 0)] * (Ntip(tree) - 2))#
    if(i > 0) {#
        # Only continue if is a node:#
        if(tree$edge[i, 2] > Ntip(tree)) {#
            j <- i#
        }#
    }#
}
i<-j
i
tree$edge[i, 2]
FindDescendants(tree$edge[i, 2], tree)
length(FindDescendants(tree$edge[i, 2], tree))
length(FindDescendants(tree$edge[i, 2], tree)) - 2
gain.branches$lengths[i]
min.losses <- max.losses <- 0#
#
for(i in gain.branches$values) {#
    if(i == 0) max.losses <- max.losses + (gain.branches$lengths[which(gain.branches$values == 0)] * (Ntip(tree) - 2))#
    if(i > 0) {#
        # Only continue if is a node:#
        if(tree$edge[i, 2] > Ntip(tree)) {#
            max.losses <- max.losses + ((length(FindDescendants(tree$edge[i, 2], tree)) - 2) * gain.branches$lengths[i])#
        }#
    }#
}
min.losses
max.losses
all.changes
all.changes[which(all.changes[, "To"] == 0)]
all.changes[which(all.changes[, "To"] == 0), ]
all.changes[which(all.changes[, "To"] == 0), "Iteration"]
sort(all.changes[which(all.changes[, "To"] == 0), "Iteration"])
rle(sort(all.changes[which(all.changes[, "To"] == 0), "Iteration"]))
rle(sort(all.changes[which(all.changes[, "To"] == 0), "Iteration"]))$lengths
min.losses <- max.losses <- 0#
#
for(i in gain.branches$values) {#
    if(i == 0) max.losses <- max.losses + (gain.branches$lengths[which(gain.branches$values == 0)] * (Ntip(tree) - 2))#
    if(i > 0) {#
        # Only continue if is a node:#
        if(tree$edge[i, 2] > Ntip(tree)) {#
            max.losses <- max.losses + ((length(FindDescendants(tree$edge[i, 2], tree)) - 2) * gain.branches$lengths[i])#
        }#
    }#
}#
#
recovered.losses <- rle(sort(all.changes[which(all.changes[, "To"] == 0), "Iteration"]))$lengths#
#
hist(recovered.losses)
?hist
hist(recovered.losses, xlim = c(min.losses, max.losses))
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)")
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Actual losses on cline of possible losses")
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)")#
#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Losses")#
#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)#
#
lines(x = c(max.losses, max.losses), y = c(0, 10000), lty = 3)
pdf("~/Documents/Publications/in prep/miRNA - James/output.pdf", width = 10, height = 7)#
#
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)")#
#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)\n(Red = significantly high rate, Blue = significiantly low rate, WHite = non-significant rate)")#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
#
plot(tree, main = "Mean per-branch rates (losses only)")#
#
edgelabels(round(apply(loss.branch.rates, 2, mean), 2), bg = "white")#
#
geoscalePlot(rev(time.bin.midpoints), all.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(all.time.rates.minCI), max(all.time.rates.maxCI)), label = "Changes per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(all.time.rates.maxCI, rev(all.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), all.time.rates.mean, type = "l")#
title("All changes")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
title("Gains only")#
#
geoscalePlot(rev(time.bin.midpoints), loss.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(loss.time.rates.minCI), max(loss.time.rates.maxCI)), label = "Losses per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")#
title("Losses only")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Gains (red) and losses (blue) compared")#
#
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Losses")#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)#
lines(x = c(max.losses, max.losses), y = c(0, 10000), lty = 3)#
#
dev.off()
par()
par()#
#
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Losses")#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)#
lines(x = c(max.losses, max.losses), y = c(0, 10000), lty = 3)
pdf("~/Documents/Publications/in prep/miRNA - James/output.pdf", width = 10, height = 7)#
#
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)")#
#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)\n(Red = significantly high rate, Blue = significiantly low rate, WHite = non-significant rate)")#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
#
plot(tree, main = "Mean per-branch rates (losses only)")#
#
edgelabels(round(apply(loss.branch.rates, 2, mean), 2), bg = "white")#
#
geoscalePlot(rev(time.bin.midpoints), all.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(all.time.rates.minCI), max(all.time.rates.maxCI)), label = "Changes per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(all.time.rates.maxCI, rev(all.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), all.time.rates.mean, type = "l")#
title("All changes")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
title("Gains only")#
#
geoscalePlot(rev(time.bin.midpoints), loss.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(loss.time.rates.minCI), max(loss.time.rates.maxCI)), label = "Losses per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")#
title("Losses only")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Gains (red) and losses (blue) compared")#
#
par()#
#
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Losses")#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)#
lines(x = c(max.losses, max.losses), y = c(0, 10000), lty = 3)#
#
dev.off()
pdf("~/Documents/Publications/in prep/miRNA - James/output.pdf", width = 10, height = 7)#
#
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)")#
#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)\n(Red = significantly high rate, Blue = significiantly low rate, WHite = non-significant rate)")#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
#
plot(tree, main = "Mean per-branch rates (losses only)")#
#
edgelabels(round(apply(loss.branch.rates, 2, mean), 2), bg = "white")#
#
geoscalePlot(rev(time.bin.midpoints), all.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(all.time.rates.minCI), max(all.time.rates.maxCI)), label = "Changes per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(all.time.rates.maxCI, rev(all.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), all.time.rates.mean, type = "l")#
title("All changes")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
title("Gains only")#
#
geoscalePlot(rev(time.bin.midpoints), loss.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(loss.time.rates.minCI), max(loss.time.rates.maxCI)), label = "Losses per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")#
title("Losses only")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Gains (red) and losses (blue) compared")#
#
layout(1)#
#
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Losses")#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)#
lines(x = c(max.losses, max.losses), y = c(0, 10000), lty = 3)#
#
dev.off()
pdf("~/Documents/Publications/in prep/miRNA - James/output.pdf", width = 10, height = 7)#
#
plot(tree, main = "Mean per-branch rates (all changes)")#
#
edgelabels(round(apply(all.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)")#
#
edgelabels(round(apply(gain.branch.rates, 2, mean), 2), bg = "white")#
#
plot(tree, main = "Mean per-branch rates (gains only)\n(Red = significantly high rate, Blue = significiantly low rate, WHite = non-significant rate)")#
#
edgelabels(pie = branch.gains.sig / nrep, piecol = c("blue", "white", "red"), cex = 0.5)#
#
plot(tree, main = "Mean per-branch rates (losses only)")#
#
edgelabels(round(apply(loss.branch.rates, 2, mean), 2), bg = "white")#
#
hist(recovered.losses, xlim = c(min.losses, max.losses), xlab = "N losses (bounded by minimum and maximum)", main = "Losses")#
lines(x = c(min.losses, min.losses), y = c(0, 10000), lty = 3)#
lines(x = c(max.losses, max.losses), y = c(0, 10000), lty = 3)#
#
geoscalePlot(rev(time.bin.midpoints), all.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(all.time.rates.minCI), max(all.time.rates.maxCI)), label = "Changes per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(all.time.rates.maxCI, rev(all.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), all.time.rates.mean, type = "l")#
title("All changes")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l")#
title("Gains only")#
#
geoscalePlot(rev(time.bin.midpoints), loss.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(loss.time.rates.minCI), max(loss.time.rates.maxCI)), label = "Losses per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = "grey", border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l")#
title("Losses only")#
#
geoscalePlot(rev(time.bin.midpoints), gain.time.rates.mean, type = "n", cex.age = 1, cex.ts = 0.6, tick.scale = 100, units = c("Period"), age.lim = c(720, 0), data.lim = c(min(gain.time.rates.minCI), max(gain.time.rates.maxCI)), label = "Gains per lineage million years", abbrev = TRUE)#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(gain.time.rates.maxCI, rev(gain.time.rates.minCI)), col = rgb(1, 0, 0, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), gain.time.rates.mean, type = "l", col = rgb(0.5, 0, 0))#
polygon(c(rev(time.bin.midpoints), time.bin.midpoints), c(loss.time.rates.maxCI, rev(loss.time.rates.minCI)), col = rgb(0, 0, 1, alpha = 0.5), border = 0)#
points(rev(time.bin.midpoints), loss.time.rates.mean, type = "l", col = rgb(0, 0, 0.5))#
title("Gains (red) and losses (blue) compared")#
#
dev.off()
library(devtools)
setwd("~/Documents/Publications/in prep/dispeRse/dispeRse")
check()
check()
devtools::install_github("laurasoul/dispeRse")
library(dispeRse)
?dispeRse
tree <- rcoal(100)
plot(tree)
# Function to convert phylogeny to 0 to 1 similarity matrix:#
    RescaledPhylogeneticSimilarity <- function(tree, k = k) {#
        # Get phylogenetic distance matrix:#
        phylo_dist <- cophenetic.phylo(tree)#
        # Rescale from 0 to 1:#
        phylo_dist <- phylo_dist / max(phylo_dist)#
        # Invert to make dissimilarity matrix a similarity matrix:#
        phylo_dist <- 1 - phylo_dist#
        # Return output:#
        return(phylo_dist)#
    }
RescaledPhylogeneticSimilarity(tree, k = 1)
diag(vcv(tree))
tree$edge.length
tree$edge.length <- tree$edge.length * 10
tree$edge.length
diag(vcv(tree))
# Function to convert phylogeny to 0 to 1 similarity matrix:#
    RescaledPhylogeneticSimilarity <- function(tree, k = k) {#
        # Get phylogenetic distance matrix:#
        phylo_dist <- cophenetic.phylo(tree)#
        # Rescale from 0 to 1:#
        phylo_dist <- phylo_dist / max(phylo_dist)#
        # Invert to make dissimilarity matrix a similarity matrix:#
        phylo_dist <- 1 - phylo_dist#
        # Return output:#
        return(phylo_dist)#
    }
RescaledPhylogeneticSimilarity(tree, k = 1)
GetNode
library(Claddis)
getwd(
)
check()
check()
document()
check()
check()
tree
plot(tree)
diag(vcv(tree))
k<-10
?Claddis
GetNodeAges(tree)
library(Claddis)
GetNodeAges(tree)
tree$root.time <- max(diag(vcv(tree)))
GetNodeAges(tree)
GetNodeAges(tree) > k
k
plot(GetNodeAges(tree))
tree$root.time
is.null(tree$root.time)
GetNodeAges(tree)        # Get node ages:#
        node.ages <- GetNodeAges(tree)
# Get node ages:#
        node.ages <- GetNodeAges(tree)
node.ages
node.ages
diag(vcv(tree))
unique(diag(vcv(tree)))
all.equal(unique(diag(vcv(tree))))
apply(unique(diag(vcv(tree))), 1, all.equal)
unique(diag(vcv(tree)))
# Get unique lengths:#
    path.lengths <- unique(diag(vcv(tree)))#
    # If there is more than one different path length (possible non-ultrametric tree):#
    if(length(path.lengths) > 1) {#
        # For each first value:#
        for(i in 1:(length(path.lengths) - 1)) {#
            # For each second value:#
            for(j in (i + 1):length(path.lengths)) {#
            }#
        }#
    }
i
j
path.lengths
# Get unique lengths:#
    path.lengths <- unique(diag(vcv(tree)))#
    # If there is more than one different path length (possible non-ultrametric tree):#
    if(length(path.lengths) > 1) {#
        # For each first value:#
        for(i in 1:(length(path.lengths) - 1)) {#
            # For each second value:#
            for(j in (i + 1):length(path.lengths)) {#
                cat(i, " ", j, "; ")#
            }#
        }#
    }
all.equal(path.lengths[i], path.lengths[j])
# Get unique lengths:#
    path.lengths <- unique(diag(vcv(tree)))#
    # If there is more than one different path length (possible non-ultrametric tree):#
    if(length(path.lengths) > 1) {#
        # For each first value:#
        for(i in 1:(length(path.lengths) - 1)) {#
            # For each second value:#
            for(j in (i + 1):length(path.lengths)) {#
                # Check to see if within floating point error and stop if not:#
                if(!all.equal(path.lengths[i], path.lengths[j])) stop("Tree must be ultrametric.")#
            }#
        }#
    }
tree$root.time <- max(diag(vcv(tree)))
tree
plot(tree)
node.ages > k
which(node.ages > k)
node.ages > 3
names(which(node.ages > k))
as.numeric(names(which(node.ages > k)))
# Find nodes older than k:#
        too.old.nodes <- as.numeric(names(which(node.ages > k)))#
        # If there are nodes that are too old:#
        if(length(too.old.nodes) > k) {#
        }
k<-2
# Find nodes older than k:#
        too.old.nodes <- as.numeric(names(which(node.ages > k)))#
        # If there are nodes that are too old:#
        if(length(too.old.nodes) > k) {#
        }
too.old.nodes
match(too.old.nodes, tree$edge[, 1])
tree$edge[match(too.old.nodes, tree$edge[, 1]), ]
tree$edge[match(too.old.nodes, tree$edge[, 1]), 2]
match(tree$edge[match(too.old.nodes, tree$edge[, 1]), 2], too.old.nodes]
match(tree$edge[match(too.old.nodes, tree$edge[, 1]), 2], too.old.nodes)
is.na(match(tree$edge[match(too.old.nodes, tree$edge[, 1]), 2], too.old.nodes))
!is.na(match(tree$edge[match(too.old.nodes, tree$edge[, 1]), 2], too.old.nodes))
which(!is.na(match(tree$edge[match(too.old.nodes, tree$edge[, 1]), 2], too.old.nodes)))
match(too.old.nodes, tree$edge[, 2])
match(too.old.nodes, tree$edge[, 2])
is.na(match(too.old.nodes, tree$edge[, 2]))
!is.na(match(too.old.nodes, tree$edge[, 2]))
which(!is.na(match(too.old.nodes, tree$edge[, 2])))
node.ages[tree$edge
]
node.ages[tree$edge[, 1]]
cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]])
cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]]) > k
apply(cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]]) > k, 1, sum)
k
apply(cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]]) > k, 1, sum)
# Identify edges with at least one (>1) too old node:#
            edges.to.change <- apply(cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]]) > k, 1, sum)
edges.to.change
edges.to.change
edges.to.change == 2
which(edges.to.change == 2)
ZLBs <- which(edges.to.change == 2)
tree$edge.length[ZLBs]
tree2<-tree
# Identify edges with at least one (>1) too old node:#
            edges.to.change <- apply(cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]]) > k, 1, sum)#
            # Isolate Zero-Length Branches (ZLBs):#
            ZLBs <- which(edges.to.change == 2)#
            if(length(ZLBs > 0)) tree$edge.length[ZLBs] <- 0
plot(tree)
# Isolate branches to shorten:#
            shorten <- which(edges.to.change == 1)
shorten
tree$edge[shorten, ]
tree$edge[shorten, 2]
node.ages[tree$edge[shorten, 2]]
k - node.ages[tree$edge[shorten, 2]]
# Isolate branches to shorten:#
            shorten <- which(edges.to.change == 1)#
            tree$edge.length[shorten] <- k - node.ages[tree$edge[shorten, 2]]
plot(tree)
tree<-tree2
plot(tree)
# Make root age maximu path length:#
        tree$root.time <- max(diag(vcv(tree)))#
        # Get node ages (expressed as time from tips of tree):#
        node.ages <- GetNodeAges(tree)#
        # Find nodes older than k:#
        too.old.nodes <- as.numeric(names(which(node.ages > k)))#
        # If there are nodes that are too old:#
        if(length(too.old.nodes) > k) {#
            # Identify edges with at least one (>1) too old node:#
            edges.to.change <- apply(cbind(node.ages[tree$edge[, 1]], node.ages[tree$edge[, 2]]) > k, 1, sum)#
            # Isolate Zero-Length Branches (ZLBs):#
            ZLBs <- which(edges.to.change == 2)#
            # Make ZLBs ZLBs:#
            if(length(ZLBs > 0)) tree$edge.length[ZLBs] <- 0#
            # Isolate branches to shorten:#
            shorten <- which(edges.to.change == 1)#
            # Shorten branches:#
            tree$edge.length[shorten] <- k - node.ages[tree$edge[shorten, 2]]#
#
        }
plot(tree)
diag(vcv(tree))
check()
